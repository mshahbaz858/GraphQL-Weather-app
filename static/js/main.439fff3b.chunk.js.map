{"version":3,"sources":["graphql/Queries.js","Pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["GET_WEATHER_QUERY","gql","Home","useState","citySearched","setCitySearched","useLazyQuery","variables","name","getWeather","data","error","console","log","className","type","placeholder","onChange","event","target","value","onClick","getCityByName","weather","temperature","actual","summary","description","wind","speed","App","client","ApolloClient","cache","InMemoryCache","uri","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ixBAEO,IAAMA,EAAoBC,cAAH,KC4CfC,MA1Cf,WAAiB,IAAD,EAC0BC,mBAAS,IADnC,mBACPC,EADO,KACOC,EADP,OAEwBC,uBAAaN,EAAmB,CACpEO,UAAW,CAAEC,KAAMJ,KAHP,mBAEPK,EAFO,YAEOC,EAFP,EAEOA,KAIrB,OANc,EAEaC,MAIT,+CAEdD,GACFE,QAAQC,IAAIH,GAIZ,sBAAKI,UAAU,OAAf,UACE,oDACA,uBACEC,KAAK,OACLC,YAAY,eACZC,SAAU,SAACC,GACTb,EAAgBa,EAAMC,OAAOC,UAGjC,wBAAQC,QAAS,kBAAMZ,KAAvB,qBACA,qBAAKK,UAAU,UAAf,SACGJ,GACC,qCACE,mCAAMA,EAAKY,cAAcd,KAAzB,OACA,+BACG,IADH,gBAEgBE,EAAKY,cAAcC,QAAQC,YAAYC,UAEvD,+CACgBf,EAAKY,cAAcC,QAAQG,QAAQC,eAEnD,8CAAiBjB,EAAKY,cAAcC,QAAQK,KAAKC,mBCrB9CC,MAbf,WACE,IAAMC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,IAAK,+CAGP,OACE,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACE,cAAC,EAAD,OCASK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.439fff3b.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_WEATHER_QUERY = gql`\n  query getCityByName($name: String!) {\n    getCityByName(name: $name) {\n      name\n      country\n      weather {\n        summary {\n          title\n          description\n          icon\n        }\n        temperature {\n          actual\n          feelsLike\n          min\n          max\n        }\n        wind {\n          speed\n          deg\n        }\n        clouds {\n          all\n          visibility\n          humidity\n        }\n        timestamp\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GET_WEATHER_QUERY } from \"../graphql/Queries\";\n\nfunction Home() {\n  const [citySearched, setCitySearched] = useState(\"\");\n  const [getWeather, { data, error }] = useLazyQuery(GET_WEATHER_QUERY, {\n    variables: { name: citySearched },\n  });\n\n  if (error) return <h1> Error found</h1>;\n\n  if (data) {\n    console.log(data);\n  }\n\n  return (\n    <div className=\"home\">\n      <h1>Search For Weather</h1>\n      <input\n        type=\"text\"\n        placeholder=\"City name...\"\n        onChange={(event) => {\n          setCitySearched(event.target.value);\n        }}\n      />\n      <button onClick={() => getWeather()}> Search</button>\n      <div className=\"weather\">\n        {data && (\n          <>\n            <h1> {data.getCityByName.name} </h1>\n            <h1>\n              {\" \"}\n              Temperature: {data.getCityByName.weather.temperature.actual}\n            </h1>\n            <h1>\n              Description: {data.getCityByName.weather.summary.description}\n            </h1>\n            <h1>Wind Speed: {data.getCityByName.weather.wind.speed}</h1>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import \"./App.css\";\nimport Home from \"./Pages/Home\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nfunction App() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: \"https://graphql-weather-api.herokuapp.com/\",\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Home />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}